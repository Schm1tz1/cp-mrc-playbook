---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: dc1
  annotations:
    platform.confluent.io/broker-id-offset: "100"
spec:
  replicas: 2
  oneReplicaPerNode: true
  license:
    globalLicense: true
  image:
    application: confluentinc/cp-server:7.9.1
    init: confluentinc/confluent-init-container:2.11.1
  dataVolumeCapacity: 10Gi
  podTemplate:
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true
  dependencies:
    zookeeper:
      # authentication:
      #   jaasConfig:
      #     secretRef: credential
        # type: digest
      endpoint: zookeeper.dc1.svc.cluster.local:2181,zookeeper.dc2.svc.cluster.local:2181/mrc
      # This endpoint is to ensure we don't use the auto-generated kafka-namespace znode but mrc. Operator checks for >1 endpoints and uses
      # the znode name after /<name>. In case we can ensure consistent naeming before/after migration, this workaround in not required.
  configOverrides:
    server:
      - confluent.consumer.lag.emitter.enabled=true
      - confluent.consumer.lag.emitter.interval.ms=10000
      - broker.rack=dc1
      - config.providers=file,dir,env
      - config.providers.dir.class=org.apache.kafka.common.config.provider.DirectoryConfigProvider
      - config.providers.env.class=org.apache.kafka.common.config.provider.EnvVarConfigProvider
      - config.providers.file.class=org.apache.kafka.common.config.provider.FileConfigProvider
      - confluent.metadata.topic.replication.factor=4
      - confluent.metadata.topic.min.insync.replicas=3
      - confluent.balancer.topic.replication.factor=4
      - confluent.security.event.logger.exporter.kafka.topic.replicas=4
      - default.replication.factor=4
      - min.insync.replicas=3
      - offsets.topic.replication.factor=4
      - offsets.topic.min.isr=3
      - transaction.state.log.replication.factor=4
      - transaction.state.log.min.isr=3
      - replica.selector.class=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - confluent.link.metadata.topic.replication.factor=4
      - confluent.link.metadata.topic.min.isr=3
      - confluent.license.topic.replication.factor=4
      - confluent.license.topic.min.isr=3
      - confluent.cluster.link.metadata.topic.replication.factor=4
      - confluent.cluster.link.metadata.topic.min.isr=3
---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: dc2
  annotations:
    platform.confluent.io/broker-id-offset: "200"
spec:
  replicas: 2
  oneReplicaPerNode: true
  license:
    globalLicense: true
  image:
    application: confluentinc/cp-server:7.9.1
    init: confluentinc/confluent-init-container:2.11.1
  dataVolumeCapacity: 10Gi
  podTemplate:
    resources:
      requests:
        cpu: 200m
        memory: 512Mi
    podSecurityContext:
      fsGroup: 1000
      runAsUser: 1000
      runAsNonRoot: true
  dependencies:
    zookeeper:
      # authentication:
      #   jaasConfig:
      #     secretRef: credential
        # type: digest
      endpoint: zookeeper.dc1.svc.cluster.local:2181,zookeeper.dc2.svc.cluster.local:2181/mrc
      # This endpoint is to ensure we don't use the auto-generated kafka-namespace znode but mrc. Operator checks for >1 endpoints and uses
      # the znode name after /<name>. In case we can ensure consistent naeming before/after migration, this workaround in not required.
  configOverrides:
    server:
      - confluent.consumer.lag.emitter.enabled=true
      - confluent.consumer.lag.emitter.interval.ms=10000
      - broker.rack=dc2
      - config.providers=file,dir,env
      - config.providers.dir.class=org.apache.kafka.common.config.provider.DirectoryConfigProvider
      - config.providers.env.class=org.apache.kafka.common.config.provider.EnvVarConfigProvider
      - config.providers.file.class=org.apache.kafka.common.config.provider.FileConfigProvider
      - confluent.metadata.topic.replication.factor=4
      - confluent.metadata.topic.min.insync.replicas=3
      - confluent.balancer.topic.replication.factor=4
      - confluent.security.event.logger.exporter.kafka.topic.replicas=4
      - default.replication.factor=4
      - min.insync.replicas=3
      - offsets.topic.replication.factor=4
      - offsets.topic.min.isr=3
      - transaction.state.log.replication.factor=4
      - transaction.state.log.min.isr=3
      - replica.selector.class=org.apache.kafka.common.replica.RackAwareReplicaSelector
      - confluent.link.metadata.topic.replication.factor=4
      - confluent.link.metadata.topic.min.isr=3
      - confluent.license.topic.replication.factor=4
      - confluent.license.topic.min.isr=3
      - confluent.cluster.link.metadata.topic.replication.factor=4
      - confluent.cluster.link.metadata.topic.min.isr=3
